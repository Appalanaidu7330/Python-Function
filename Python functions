{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "22e9ee5a-f78c-48ad-b6dc-ea93f1601a4c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello naidu\n",
      "good morning naveen\n"
     ]
    }
   ],
   "source": [
    "def greet():\n",
    "    print('hello naidu')\n",
    "    print('good morning naveen')\n",
    "greet()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "992d4222-68a3-468e-91bc-f44c6703a953",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "amma nanna\n",
      "mother father\n",
      "sun daughter\n",
      "grand mother grand father\n"
     ]
    }
   ],
   "source": [
    "def greet():\n",
    "    print('amma nanna')\n",
    "    print('mother father')\n",
    "    print('sun daughter')\n",
    "    print('grand mother grand father')\n",
    "greet()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "080a5115-7d13-462f-9c1b-6f77dfcdb2ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello naidu\n",
      "good morning naveen\n",
      "hello naidu\n",
      "good morning naveen\n",
      "hello naidu\n",
      "good morning naveen\n"
     ]
    }
   ],
   "source": [
    "def greet():\n",
    "    print('hello naidu')\n",
    "    print('good morning naveen')\n",
    "greet()\n",
    "\n",
    "greet()\n",
    "\n",
    "greet()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5bc139d4-a72c-4db1-a5be-be6bde994b2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    }
   ],
   "source": [
    "# write a python code add 2 number \n",
    "\n",
    "def add(x,y):\n",
    "    c=x+y\n",
    "    print(c)  \n",
    "add(5,6)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d12650af-9dc1-4c40-97d6-9ce37c1102d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18\n"
     ]
    }
   ],
   "source": [
    "# write a python code add 2 number\n",
    "\n",
    "def add(x,y,z):\n",
    "    c=x+y+z\n",
    "    print(c)  \n",
    "add(5,6, 7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d720b6fd-869b-4904-977d-0f137cc75ade",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21\n"
     ]
    }
   ],
   "source": [
    "def add(x,y,z):\n",
    "    c=x+y+z\n",
    "    print(c)\n",
    "add(5,7,9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bfd15314-6e7b-4ec9-b53b-5f637e369635",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "naidu\n",
      "rishika\n",
      "22\n"
     ]
    }
   ],
   "source": [
    "def greet():\n",
    "    print('naidu')\n",
    "    print('rishika')\n",
    "greet()\n",
    "\n",
    "def add(x,y,z):\n",
    "    c=x+y+z\n",
    "    print(c)\n",
    "add(9,2,11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ef7982b2-dc38-4a3e-bc2f-77b993dd7a80",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "naidu\n",
      "good evening\n",
      "25\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "def greet():\n",
    "    print('naidu')\n",
    "    print('good evening')\n",
    "    \n",
    "def add(x,y,z):\n",
    "    c=x+y+z\n",
    "    print(c)\n",
    "\n",
    "def sub(x,y):\n",
    "    d = x-y\n",
    "    print(d)\n",
    "    \n",
    "greet()\n",
    "add(3,9,13)\n",
    "sub(18,18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "76790130-59f1-45a7-9a7f-f956a92710de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "naidu\n",
      "rishika\n",
      "22\n",
      "-2\n"
     ]
    }
   ],
   "source": [
    "def greet():\n",
    "    print('naidu')\n",
    "    print('rishika')\n",
    "\n",
    "def add(a,b,c):\n",
    "    z=a+b+c\n",
    "    print(z)\n",
    "\n",
    "def sub(x,y):\n",
    "    d=x-y\n",
    "    print(d)\n",
    "\n",
    "greet()\n",
    "add(6,7,9)\n",
    "sub(3,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a6f0ac23-297a-4922-bd0f-f131b9bfe183",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18 0 81 1.0 387420489\n"
     ]
    }
   ],
   "source": [
    " # what if i want to return 2 values add_sub & i want to return 2 values & function can accept multiple value \n",
    "\n",
    "def add_sub(x,y):\n",
    "    c=x+y\n",
    "    d=x-y\n",
    "    e=x*y\n",
    "    f=x/y\n",
    "    g=x**y\n",
    "    \n",
    "    print(c,d,e,f,g)\n",
    "add_sub(9,9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "bc3a6fa5-e7cc-4868-81c5-78bb6b407303",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "27 3.0\n"
     ]
    }
   ],
   "source": [
    "def add_sub(x,y):\n",
    "    a=x*y\n",
    "    b=x/y\n",
    "    print(a,b)\n",
    "add_sub(9,3)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "a69ce60e-7ff8-4791-b30e-539a820a695f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ramu naidu\n",
      "sathay vathi\n",
      "9\n",
      "12 -2 35 0.7142857142857143\n"
     ]
    }
   ],
   "source": [
    "def greet():\n",
    "    print('ramu naidu')\n",
    "    print('sathay vathi')\n",
    "\n",
    "def add(x,y,z):\n",
    "    c =(x+y+z)\n",
    "    print(c)\n",
    "def sub(x,y):\n",
    "    a =x+y\n",
    "    b=x-y\n",
    "    d=x*y\n",
    "    e=x/y\n",
    "    print(a,b,d,e)\n",
    "greet()\n",
    "add(2,3,4)\n",
    "sub(5,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "94920f5d-b86f-4bd4-9970-e63aa58acf20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(9, -1)\n",
      "<class 'tuple'>\n"
     ]
    }
   ],
   "source": [
    "def add_sub(x,y): # what if i want to return 2 values add_sub & i want to return 2 values & function can accept multiple value \n",
    "    c= x+y\n",
    "    d= x-y\n",
    "    return c, d\n",
    "    \n",
    "result = add_sub(4,5)\n",
    "\n",
    "print(result)\n",
    "print(type(result))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "52923041-b636-4f94-8115-35bf20f08f1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14 -4\n",
      "<class 'int'>\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "def add_sub(x,y):\n",
    "    c= x+y\n",
    "    d= x-y\n",
    "    return c,d\n",
    "result1,result2 = add_sub(5,9)\n",
    "\n",
    "print(result1,result2)\n",
    "\n",
    "print(type(result1))\n",
    "print(type(result2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "e57ed404-009b-4e22-bfbf-5af3ce032f85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "def bmw(x): #update function take the value from the user\n",
    "    x = 10\n",
    "    print(x)\n",
    "    \n",
    "bmw(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "15b2047d-baae-4601-a09f-6a9e2d98f690",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "99\n"
     ]
    }
   ],
   "source": [
    "def audi(y):\n",
    "    y = 99\n",
    "    print(y)\n",
    "audi(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f768ecc-e99d-4be5-a052-a27087fc3015",
   "metadata": {},
   "source": [
    "# formal argument"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "7bfb24f4-8aa1-4bd6-99bb-86ecb8fcf804",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after function definition on line 2 (1232482718.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[81], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    c = a+b\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after function definition on line 2\n"
     ]
    }
   ],
   "source": [
    "class nit:\n",
    "    def add(a,b): # a & b called formal argument\n",
    "    c = a+b\n",
    "    print(c)\n",
    "    \n",
    "add(5,6) #5 and 6 we called as actual argument"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba0ed7f4-c715-4f59-9d8d-6677405d27b6",
   "metadata": {},
   "source": [
    "# actual argument\n",
    "    - positional argument\n",
    "    - keyword argument\n",
    "    - variable lenght\n",
    "    - defaul "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "b7d0acc2-8cb8-4841-a813-2fea0a658489",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nit\n",
      "22\n"
     ]
    }
   ],
   "source": [
    "def person(name,age):\n",
    "    print(name)\n",
    "    print(age)\n",
    "    \n",
    "person('nit',22)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "8ba2f788-3e2a-4005-9988-892d7b0fbf2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "naidu\n",
      "22\n"
     ]
    }
   ],
   "source": [
    "def person(name,age):\n",
    "    print(name)\n",
    "    print(age)\n",
    "    \n",
    "person('naidu',22)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "7cbaa262-5c75-442f-b5a3-0d82de506325",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rishika\n",
      "21\n"
     ]
    }
   ],
   "source": [
    "def person(name,age):\n",
    "    print(name)\n",
    "    print(age)\n",
    "    \n",
    "person('Rishika',21)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "51173942-926f-44d8-b621-5b46d6e278eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rishika\n",
      "18\n",
      "22331E0027\n",
      "167\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def person(name,age,number,hight):\n",
    "    print(name)\n",
    "    print(age-4)   \n",
    "    print(number)\n",
    "    print(hight)\n",
    "person(age = 22, name = 'Rishika', number = '22331E0027', hight = '167' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "097a22c4-13f3-42de-8e18-b2fceab7d4f7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
